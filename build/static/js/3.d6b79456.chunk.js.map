{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/UI/Spinner/Spinner.js","components/UI/Input/Input.js","containers/Authenticate/Authenticate.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","Spinner","class","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","Invalid","elementType","className","join","elementConfig","onChange","changed","options","map","option","key","displayValue","Label","label","connect","state","loading","authReducer","error","isAuthenticated","token","searchResult","searchReducer","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","elementsType","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","NavigationItem","link","exact","src","alt","onSubmit","preventDefault","Button","clicked","btnType"],"mappings":"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","file":"static/js/3.d6b79456.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\n\nimport \"./Spinner.css\";\n\nconst Spinner = () => (\n  <div class=\"loader\">\n    <h2>LOADING</h2>\n  </div>\n);\n\nexport default Spinner;\n","import React from \"react\";\n\nimport classes from \"./Input.css\";\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.InputElement}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport NavigationItem from \"../../components/Navigation/NavigationItem\";\nimport * as actions from \"../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../utils/utility\";\nimport \"./Authenticate.css\";\n\nconst Authenticate = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Email Address\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const [isSignup, setIsSignup] = useState(true);\n\n  const { searchResult, authRedirectPath, onSetAuthRedirectPath } = props;\n\n  useEffect(() => {\n    if (!searchResult && authRedirectPath !== \"/\") {\n      onSetAuthRedirectPath();\n    }\n  }, [searchResult, authRedirectPath, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(authForm, {\n      [controlName]: updateObject(authForm[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          authForm[controlName].validation\n        ),\n        touched: true\n      })\n    });\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = event => {\n    event.preventDefault();\n    setIsSignup(!isSignup);\n  };\n\n  const formElementsArray = [];\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => (\n    <Input\n      key={formElement.id}\n      elementsType={formElement.config.elementType}\n      elementConfig={formElement.config.elementConfig}\n      value={formElement.config.value}\n      invalid={!formElement.config.valid}\n      shouldValidate={formElement.config.validation}\n      touched={formElement.config.touched}\n      changed={event => inputChangedHandler(event, formElement.id)}\n    />\n  ));\n\n  if (props.loading) {\n    form = <Spinner />;\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = <h2>{props.error.message}</h2>;\n  }\n\n  let authRedirect = null;\n  if (props.isAuthenticated) {\n    authRedirect = <Redirect to={props.authRedirectPath} />;\n  }\n\n  return (\n    <div className=\"Auth\">\n      <div className=\"Logo\">\n        <NavigationItem link=\"/\" exact>\n          <img src=\"/Logo.png\" alt=\"Logo\" />\n        </NavigationItem>\n        <NavigationItem link=\"/\" exact>\n          <h1>Better World</h1>\n        </NavigationItem>\n      </div>\n      <div className=\"AuthBox\" onSubmit={submitHandler}>\n        <h1>{isSignup ? \"Sign Up\" : \"Sign In\"}</h1>\n        <form className=\"authForm\">\n          {authRedirect}\n          {errorMessage}\n          <div className=\"Input\">{form}</div>\n          <div className=\"AuthButtons\">\n            <Button clicked={switchAuthModeHandler} btnType=\"Sign\">\n              SWITCH TO {isSignup ? \"SIGN IN\" : \"SIGN UP\"}\n            </Button>\n            <Button btnType=\"Submit\">SUBMIT</Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.authReducer.loading,\n    error: state.authReducer.error,\n    isAuthenticated: state.authReducer.token !== null,\n    searchResult: state.searchReducer.searchResult,\n    authRedirectPath: state.authReducer.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authenticate);\n"],"sourceRoot":""}